{"version":3,"file":"charts.js","sources":["../../../src/components/charts.tsx"],"sourcesContent":["\"use client\"\n\nimport classNames from \"classnames\"\nimport * as React from \"react\"\nimport AutoSizer from \"react-virtualized-auto-sizer\"\nimport {\n  CartesianGrid as RechartsCartesianGrid,\n  CartesianGridProps,\n  Label as RechartsLabel,\n  Legend as RechartsLegend,\n  LegendProps,\n  Tooltip as RechartsTooltip,\n  TooltipProps,\n  XAxis as RechartsXAxis,\n  XAxisProps,\n  YAxis as RechartsYAxis,\n  YAxisProps,\n} from \"recharts\"\nimport styles from \"./charts.module.css\"\n\n/**\n * Colors\n */\n\n/* Default palette is Blue */\nexport const DEFAULT_COLORS = [\"3b82f6\", \"bfdbfe\", \"2563eb\", \"93c5fd\", \"1d4ed8\", \"60a5fa\"]\n\nexport function createColorMap({ categories, colors }: { categories: string[]; colors: string[] }) {\n  const colorMap = new Map<string, string>()\n  for (let i = 0; i < categories.length; i++) {\n    colorMap.set(categories[i], colors[i % colors.length])\n  }\n  return colorMap\n}\n\n/**\n * Wrapper\n */\ninterface ChartContextValue {\n  colorMap: Map<string, string>\n  dark?: boolean\n}\nconst ChartContext = React.createContext<ChartContextValue>(undefined!)\nexport function ChartContextProvider({\n  categories,\n  colors,\n  dark,\n  children,\n}: {\n  categories: string[]\n  colors: string[]\n  dark?: boolean\n  children: React.ReactNode\n}) {\n  const value = React.useMemo(\n    () => ({ colorMap: createColorMap({ categories, colors }), dark }),\n    [categories, colors, dark],\n  )\n  return <ChartContext.Provider value={value}>{children}</ChartContext.Provider>\n}\nexport function useChartContext() {\n  return React.useContext(ChartContext)\n}\n\ninterface Props extends Omit<React.HTMLAttributes<HTMLDivElement>, \"children\"> {\n  children: (args: { width: number; height: number }) => React.ReactElement\n}\n\nexport const AutoSizedChartWrapper = React.forwardRef<HTMLDivElement, Props>(function AutoSizedChartWrapper(\n  { className, style, children, ...props },\n  ref,\n) {\n  return (\n    <div\n      className={classNames(className, styles.root)}\n      ref={ref}\n      {...props}\n      style={{ ...style, minHeight: 200, minWidth: 300 }}\n    >\n      <AutoSizer>{({ height, width }) => children({ height, width })}</AutoSizer>\n    </div>\n  )\n})\n\n/**\n * Recharts Wrappers\n */\nexport const ChartLabel = RechartsLabel\n\nexport const CartesianGrid = ({\n  ref,\n  className,\n  horizontal = true,\n  vertical = false,\n  strokeWidth = 1,\n  ...otherProps\n}: CartesianGridProps) => {\n  const { dark } = useChartContext()\n  return (\n    <RechartsCartesianGrid\n      className={classNames(className, styles.grid, { [styles.dark]: dark })}\n      horizontal={horizontal}\n      vertical={vertical}\n      strokeWidth={strokeWidth}\n      ref={ref as any}\n      {...otherProps}\n    />\n  )\n}\nCartesianGrid.displayName = RechartsCartesianGrid.displayName\n\nexport const XAxis = ({ ref, ...otherProps }: XAxisProps) => {\n  return <RechartsXAxis ref={ref as any} {...otherProps} />\n}\nXAxis.displayName = RechartsXAxis.displayName\nXAxis.defaultProps = {\n  ...RechartsXAxis.defaultProps,\n  axisLine: false,\n  tickLine: false,\n  padding: { left: 20, right: 20 },\n  interval: \"equidistantPreserveStart\",\n}\n\nexport const YAxis = ({ ref, ...otherProps }: YAxisProps) => {\n  return <RechartsYAxis ref={ref as any} {...otherProps} />\n}\nYAxis.displayName = RechartsYAxis.displayName\nYAxis.defaultProps = { ...RechartsYAxis.defaultProps, axisLine: false, tickLine: false, width: 40 }\n\ninterface Payload {\n  name?: string | number\n  value: string | number\n}\n\ninterface DefaultTooltipProps {\n  active?: boolean\n  colorMap: Map<string, string>\n  dark?: boolean\n  payload?: any\n  label: string\n}\n\nfunction DefaultTooltip({ active, colorMap, dark, payload, label }: DefaultTooltipProps) {\n  if (active && payload && payload.length) {\n    return (\n      <div className={classNames(styles.tooltip, { [styles.dark]: dark })}>\n        {label ? <div>{label}</div> : null}\n        {payload.map(({ name, value }: Payload, index: number) => (\n          <div className={styles.row} key={index}>\n            <span className={styles.dot} style={{ backgroundColor: colorMap.get(String(name)) }} />\n            <span className={styles.name}>{name ?? \"\"}</span>\n            <span className={styles.value}>{value}</span>\n          </div>\n        ))}\n      </div>\n    )\n  }\n\n  return null\n}\n\nexport const ChartTooltip = (props: TooltipProps<any, any>) => {\n  const { colorMap, dark } = useChartContext()\n  return (\n    <RechartsTooltip\n      content={({ active, payload, label }) => (\n        <DefaultTooltip active={active} colorMap={colorMap} dark={dark} label={label} payload={payload} />\n      )}\n      {...props}\n    />\n  )\n}\nChartTooltip.displayName = RechartsTooltip.displayName\nChartTooltip.defaultProps = {\n  ...RechartsTooltip.defaultProps,\n  cursor: { stroke: \"#D1D5DB\", strokeWidth: 1 },\n  isAnimationActive: false,\n}\n\ninterface DefaultLegendProps {\n  align?: \"center\" | \"left\" | \"right\"\n  colorMap: Map<string, string>\n  dark?: boolean\n  payload?: any\n}\n\nfunction DefaultLegend({ align, colorMap, dark, payload }: DefaultLegendProps) {\n  return (\n    <div\n      className={classNames(styles.legend, {\n        [styles.dark]: dark,\n        [styles.left]: align === \"left\",\n        [styles.center]: align === \"center\",\n        [styles.right]: align === \"right\",\n      })}\n    >\n      {payload.map(({ value }: Payload, index: number) => (\n        <div className={styles.row} key={index}>\n          <span className={styles.dot} style={{ backgroundColor: colorMap.get(String(value)) }} />\n          <span className={styles.name}>{value}</span>\n        </div>\n      ))}\n    </div>\n  )\n}\n\nexport const ChartLegend = ({ ref, ...otherProps }: LegendProps) => {\n  const { colorMap, dark } = useChartContext()\n  return (\n    <RechartsLegend\n      content={({ payload }) => (\n        <DefaultLegend align={otherProps.align} colorMap={colorMap} dark={dark} payload={payload} />\n      )}\n      ref={ref as any}\n      {...otherProps}\n    />\n  )\n}\nChartLegend.displayName = RechartsLegend.displayName\nChartLegend.defaultProps = { ...RechartsLegend.defaultProps, align: \"right\", verticalAlign: \"top\" }\n"],"names":[],"mappings":";;;;;;;;AAyBO;AAEA;AACL;AACA;AACE;AAAqD;AAEvD;AACF;AASA;AACO;AAA8B;AACnC;AACA;AACA;AAEF;AAME;AAAoB;AAC8C;AACvC;AAE3B;AACF;AACO;AACL;AACF;AAMO;AAIL;AACE;AAAC;AAAA;AAC6C;AAC5C;AACI;AAC6C;AAAA;AAEc;AAGrE;AAKO;AAEA;AAAuB;AAC5B;AACA;AACa;AACF;AACG;AAEhB;AACE;AACA;AACE;AAAC;AAAA;AACsE;AACrE;AACA;AACA;AACA;AACI;AAAA;AAGV;AACA;AAEO;AACL;AACF;AACA;AACA;AAAqB;AACF;AACP;AACA;AACqB;AAEjC;AAEO;AACL;AACF;AACA;AACA;AAeA;AACE;AACE;AAUE;AAIJ;AACF;AAEa;AACX;AACA;AACE;AAAC;AAAA;AAEmG;AAE9F;AAAA;AAGV;AACA;AACA;AAA4B;AACP;AACyB;AAE9C;AASA;AACE;AACE;AAAC;AAAA;AACsC;AACpB;AACU;AACE;AACD;AAC3B;AAAA;AAOA;AAGP;AAEO;AACL;AACA;AACE;AAAC;AAAA;AAE6F;AAE5F;AACI;AAAA;AAGV;AACA;AACA;;"}