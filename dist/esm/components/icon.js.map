{"version":3,"file":"icon.js","sources":["../../../src/components/icon.tsx"],"sourcesContent":["\"use client\";\n\nimport classNames from \"classnames\";\nimport React, { ReactNode, useEffect, useState } from \"react\";\nimport styles from \"./icon.module.css\";\nimport { icons } from \"../assets/icons/final\";\nimport { loadIcon } from \"../lib/load-icon\";\n\n// If empty, then renders as an empty icon, but takes up the same amount of space\n// If null, then does not render anything.\nexport type IconName = keyof typeof icons | \"empty\" | null;\n\ninterface Props extends React.HTMLAttributes<HTMLSpanElement> {\n  name: IconName;\n}\n\nconst IconFallback = () => <svg width=\"1em\" height=\"1em\"></svg>;\n\nexport const Icon = React.forwardRef<HTMLSpanElement, Props>(function Icon(\n  props,\n  ref\n) {\n  const [icon, setIcon] = useState<ReactNode | null>(<IconFallback />);\n  const { className, name, ...otherProps } = props;\n\n  async function getChildren(name: IconName) {\n    if (name === \"empty\") {\n      return <IconFallback />;\n    } else if (name === null) {\n      return null;\n    } else {\n      const Component = await loadIcon(name);\n      if (!Component) {\n        console.warn(`Icon rendered with invalid name: ${String(name)}`);\n        return null;\n      }\n      return <Component />;\n    }\n  }\n\n  useEffect(() => {\n    if (name) {\n      getChildren(name).then((children) => setIcon(children));\n    }\n  }, [name]);\n\n  return name === null ? null : (\n    <span\n      className={classNames(className, styles.root)}\n      ref={ref}\n      {...otherProps}\n    >\n      {icon}\n    </span>\n  );\n});\n"],"names":[],"mappings":";;;;;;;AAgBA;AAEO;AAIL;AACA;AAEA;AACE;AACE;AAAqB;AAErB;AAAO;AAEP;AACA;AACE;AACA;AAAO;AAET;AAAkB;AACpB;AAGF;AACE;AACE;AAAsD;AACxD;AAGF;AACE;AAAC;AAAA;AAC6C;AAC5C;AACI;AAAA;AAEH;AAGP;;"}