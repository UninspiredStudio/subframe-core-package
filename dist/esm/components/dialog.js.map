{"version":3,"file":"dialog.js","sources":["../../../src/components/dialog.tsx"],"sourcesContent":["\"use client\"\n\nimport * as RadixDialog from \"@radix-ui/react-dialog\"\nimport classNames from \"classnames\"\nimport React, { useCallback } from \"react\"\nimport styles from \"./dialog.module.css\"\n\ninterface RootProps extends RadixDialog.DialogProps, RadixDialog.DialogOverlayProps {}\n\nexport const Root = React.forwardRef<HTMLDivElement, RootProps>(function Dialog(\n  { className, defaultOpen, open, onOpenChange, modal, ...otherProps },\n  ref,\n) {\n  return (\n    <RadixDialog.Root defaultOpen={defaultOpen} open={open} onOpenChange={onOpenChange} modal={modal}>\n      <RadixDialog.Portal>\n        <RadixDialog.Overlay ref={ref} asChild className={classNames(className, styles.root)} {...otherProps} />\n      </RadixDialog.Portal>\n    </RadixDialog.Root>\n  )\n})\n\ninterface ContentProps extends RadixDialog.DialogContentProps {\n  // technique taken from https://headlessui.com/react/dialog#managing-initial-focus\n  initialFocusRef?: React.MutableRefObject<HTMLElement | null>\n}\n\nexport const Content = React.forwardRef<HTMLDivElement, ContentProps>(function Content(\n  { onOpenAutoFocus, initialFocusRef, ...otherProps },\n  ref,\n) {\n  const onOpenAutoFocusCallback = useCallback(\n    (e: Event) => {\n      if (initialFocusRef) {\n        e.preventDefault()\n        initialFocusRef.current?.focus()\n      }\n      onOpenAutoFocus?.(e)\n    },\n    [initialFocusRef, onOpenAutoFocus],\n  )\n\n  return <RadixDialog.Content ref={ref} asChild onOpenAutoFocus={onOpenAutoFocusCallback} {...otherProps} />\n})\n\nexport const Dialog = { Root, Content }\n"],"names":[],"mappings":";;;;;;;AASO;AAIL;AAOF;AAOa;AAIX;AAAgC;AAE5B;AACE;AACA;AAA+B;AAEjC;AAAmB;AACrB;AACiC;AAGnC;AACF;AAEa;;"}