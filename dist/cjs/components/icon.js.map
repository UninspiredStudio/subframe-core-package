{"version":3,"file":"icon.js","sources":["../../../src/components/icon.tsx"],"sourcesContent":["\"use client\";\n\nimport classNames from \"classnames\";\nimport React, { lazy, Suspense } from \"react\";\nimport styles from \"./icon.module.css\";\nimport { icons } from \"src/assets/icons/final\";\n\n// If empty, then renders as an empty icon, but takes up the same amount of space\n// If null, then does not render anything.\nexport type IconName = keyof typeof icons | \"empty\" | null;\n\ninterface Props extends React.HTMLAttributes<HTMLSpanElement> {\n  name: IconName;\n}\n\nconst IconFallback = () => <svg width=\"1em\" height=\"1em\"></svg>;\n\nexport const Icon = React.forwardRef<HTMLSpanElement, Props>(function Icon(\n  props,\n  ref\n) {\n  const { className, name, ...otherProps } = props;\n\n  if (name === null) {\n    return null;\n  }\n\n  let children;\n  if (name === \"empty\") {\n    children = <IconFallback />;\n  } else {\n    const lazyIcon = icons[name];\n    // TODO warn?\n    if (!lazyIcon) {\n      console.warn(`Icon rendered with invalid name: ${name}`);\n      return null;\n    }\n    const Component = lazy(lazyIcon);\n    children = (\n      <Suspense fallback={<IconFallback />}>\n        <Component />\n      </Suspense>\n    );\n  }\n\n  return (\n    <span\n      className={classNames(className, styles.root)}\n      ref={ref}\n      {...otherProps}\n    >\n      {children}\n    </span>\n  );\n});\n"],"names":[],"mappings":";;;;;;;;;AAeA;AAEO;AAIL;AAEA;AACE;AAAO;AAGT;AACA;AACE;AAAyB;AAEzB;AAEA;AACE;AACA;AAAO;AAET;AACA;AAGE;AAIJ;AACE;AAAC;AAAA;AAC6C;AAC5C;AACI;AAAA;AAEH;AAGP;;"}