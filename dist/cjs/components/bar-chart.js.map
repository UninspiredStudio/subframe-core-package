{"version":3,"file":"bar-chart.js","sources":["../../../src/components/bar-chart.tsx"],"sourcesContent":["\"use client\"\n\nimport React from \"react\"\nimport { Bar, BarChart as RechartsBarChart } from \"recharts\"\nimport {\n  AutoSizedChartWrapper,\n  CartesianGrid,\n  ChartContextProvider,\n  ChartLegend,\n  ChartTooltip,\n  DEFAULT_COLORS,\n  XAxis,\n  YAxis,\n} from \"./charts\"\n\ninterface Props extends React.HTMLAttributes<HTMLDivElement> {\n  categories: string[]\n  colors?: string[]\n  dark?: boolean\n  data: Array<object>\n  index: string\n  stacked?: boolean\n\n  // Slots\n  gridLines?: React.ReactNode\n  xAxis?: React.ReactNode\n  yAxis?: React.ReactNode\n  tooltip?: React.ReactNode\n  legend?: React.ReactNode\n\n  // BarChart props\n  layout?: \"horizontal\" | \"vertical\"\n  syncId?: number | string\n  margin?: { top: number; right: number; bottom: number; left: number }\n  barCategoryGap?: number | string\n  barGap?: number | string\n  barSize?: number | string\n  maxBarSize?: number\n  stackOffset?: \"expand\" | \"none\" | \"wiggle\" | \"silhouette\"\n  reverseStackOrder?: boolean\n}\n\nexport const BarChart = React.forwardRef<HTMLDivElement, Props>(function BarChart(\n  {\n    categories,\n    colors = DEFAULT_COLORS,\n    dark,\n    data,\n    index,\n    stacked,\n    gridLines = <CartesianGrid />,\n    xAxis = <XAxis dataKey={index} />,\n    yAxis = <YAxis />,\n    tooltip = <ChartTooltip cursor={{ fill: \"#D1D5DB\", opacity: \"0.15\" }} />,\n    legend = <ChartLegend />,\n    children = categories.map((category, index) => {\n      const color = colors[index % colors.length]\n      return (\n        <Bar\n          key={index}\n          dataKey={category}\n          fill={color}\n          stackId={stacked ? \"a\" : undefined}\n          isAnimationActive={false}\n        />\n      )\n    }),\n    layout,\n    syncId,\n    margin,\n    barCategoryGap,\n    barGap,\n    barSize,\n    maxBarSize,\n    stackOffset,\n    reverseStackOrder,\n    ...otherProps\n  },\n  ref,\n) {\n  return (\n    <ChartContextProvider categories={categories} colors={colors} dark={dark}>\n      <AutoSizedChartWrapper ref={ref} {...otherProps}>\n        {({ height, width }) => (\n          <RechartsBarChart\n            data={data}\n            height={height}\n            width={width}\n            layout={layout}\n            syncId={syncId}\n            margin={margin}\n            barCategoryGap={barCategoryGap}\n            barGap={barGap}\n            barSize={barSize}\n            maxBarSize={maxBarSize}\n            stackOffset={stackOffset}\n            reverseStackOrder={reverseStackOrder}\n          >\n            {gridLines}\n            {xAxis}\n            {yAxis}\n            {tooltip}\n            {legend}\n            {children}\n          </RechartsBarChart>\n        )}\n      </AutoSizedChartWrapper>\n    </ChartContextProvider>\n  )\n})\n"],"names":[],"mappings":";;;;;;;;AA0CO;AACL;AACE;AACS;AACT;AACA;AACA;AACA;AAC2B;AACI;AAChB;AACuD;AAChD;AAEpB;AACA;AACE;AAAC;AAAA;AACM;AACI;AACH;AACmB;AACN;AAAA;AACrB;AAEH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEF;AAGA;AAIQ;AAAC;AAAA;AACC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEC;AACA;AACA;AACA;AACA;AACA;AAMb;;"}