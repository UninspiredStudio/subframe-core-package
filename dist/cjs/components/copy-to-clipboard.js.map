{"version":3,"file":"copy-to-clipboard.js","sources":["../../../src/components/copy-to-clipboard.tsx"],"sourcesContent":["\"use client\"\n\nimport copy from \"copy-to-clipboard\"\nimport React, { useCallback } from \"react\"\nimport { composeRefs } from \"../lib/compose-react-refs\"\n\n// NOTE: this is the nearly same code as https://github.com/nkbt/react-copy-to-clipboard only written\n// as a functional component and with forwarding refs, minus a few useless props\ninterface Props {\n  clipboardText?: string\n  children?: React.ReactElement\n  onCopy?: () => void // NOTE: deviating from react-copy-to-clipboard here\n  // NOTE: a smaller set of options\n  options?: {\n    format: string\n  }\n}\n\nexport const Root = React.forwardRef<HTMLElement, Props>(function CopyToClipboardRootComponent(props: Props, ref) {\n  const { clipboardText, onCopy, children, options, ...otherProps } = props\n\n  const format = options?.format\n  const elem = children && React.Children.only(children)\n  const elemOnClick = elem?.props?.onClick\n\n  const onClick = useCallback(\n    (event: React.MouseEvent) => {\n      if (clipboardText !== undefined) {\n        if (format) {\n          copy(clipboardText, { format })\n        } else {\n          copy(clipboardText)\n        }\n\n        if (onCopy) {\n          onCopy()\n        }\n      }\n\n      // Bypass onClick if it was present\n      if (typeof elemOnClick === \"function\") {\n        elemOnClick(event)\n      }\n    },\n    [onCopy, clipboardText, elemOnClick, format],\n  )\n\n  return elem\n    ? React.cloneElement(elem as any, { ...otherProps, onClick, ref: composeRefs(ref, elem?.props?.ref) })\n    : null\n})\n\nexport const CopyToClipboard = { Root }\n"],"names":[],"mappings":";;;;;;;AAkBO;AACL;AAEA;AACA;AACA;AAEA;AAEI;;AAEI;;;;;;AAMA;;;;AAKJ;;;;AAOJ;;;AAGF;AAEa;;;"}