{"version":3,"file":"area-chart.js","sources":["../../../src/components/area-chart.tsx"],"sourcesContent":["\"use client\"\n\nimport classNames from \"classnames\"\nimport React from \"react\"\nimport { Area, AreaChart as RechartsAreaChart, Dot, DotProps } from \"recharts\"\nimport styles from \"./area-chart.module.css\"\nimport {\n  AutoSizedChartWrapper,\n  CartesianGrid,\n  ChartContextProvider,\n  ChartLegend,\n  ChartTooltip,\n  DEFAULT_COLORS,\n  XAxis,\n  YAxis,\n} from \"./charts\"\n\ninterface Props extends React.HTMLAttributes<HTMLDivElement> {\n  categories: string[]\n  colors?: string[]\n  dark?: boolean\n  data: Array<object>\n  index: string\n\n  // Slots\n  gridLines?: React.ReactNode\n  xAxis?: React.ReactNode\n  yAxis?: React.ReactNode\n  tooltip?: React.ReactNode\n  legend?: React.ReactNode\n\n  // AreaChart props\n  layout?: \"horizontal\" | \"vertical\"\n  syncId?: number | string\n  margin?: { top: number; right: number; bottom: number; left: number }\n  stackOffset?: \"expand\" | \"none\" | \"wiggle\" | \"silhouette\"\n}\n\nexport const AreaChart = React.forwardRef<HTMLDivElement, Props>(function AreaChart(\n  {\n    categories,\n    colors = DEFAULT_COLORS,\n    dark,\n    data,\n    index,\n    gridLines = <CartesianGrid />,\n    xAxis = <XAxis dataKey={index} />,\n    yAxis = <YAxis />,\n    tooltip = <ChartTooltip />,\n    legend = <ChartLegend />,\n    children = (\n      <>\n        {categories.map((category, index) => {\n          const color = colors[index % colors.length]\n          return (\n            <defs key={category}>\n              <linearGradient style={{ color }} id={color} x1=\"0\" x2=\"0\" y1=\"0\" y2=\"1\">\n                <stop offset=\"5%\" stopColor=\"currentColor\" stopOpacity={0.7} />\n                <stop offset=\"98%\" stopColor=\"currentColor\" stopOpacity={0.1} />\n              </linearGradient>\n            </defs>\n          )\n        })}\n        {categories.map((category, index) => {\n          const color = colors[index % colors.length]\n          return (\n            <Area\n              key={index}\n              type=\"monotone\"\n              activeDot={(props: DotProps) => {\n                const { cx, cy, stroke, strokeLinecap, strokeLinejoin, strokeWidth } = props\n                return (\n                  <Dot\n                    className={classNames(styles.dot, { [styles.dark]: dark })}\n                    cx={cx}\n                    cy={cy}\n                    r={5}\n                    fill={color}\n                    stroke={stroke}\n                    strokeLinecap={strokeLinecap}\n                    strokeLinejoin={strokeLinejoin}\n                    strokeWidth={strokeWidth}\n                  />\n                )\n              }}\n              dataKey={category}\n              fill={`url(#${color})`}\n              isAnimationActive={false}\n              stackId=\"a\"\n              stroke={color}\n              strokeLinejoin={\"round\"}\n              strokeLinecap={\"round\"}\n              strokeWidth={2}\n            />\n          )\n        })}\n      </>\n    ),\n    layout,\n    syncId,\n    margin,\n    stackOffset,\n    ...otherProps\n  },\n  ref,\n) {\n  return (\n    <ChartContextProvider categories={categories} colors={colors} dark={dark}>\n      <AutoSizedChartWrapper ref={ref} {...otherProps}>\n        {({ height, width }) => (\n          <RechartsAreaChart\n            data={data}\n            height={height}\n            width={width}\n            layout={layout}\n            syncId={syncId}\n            margin={margin}\n            stackOffset={stackOffset}\n          >\n            {gridLines}\n            {xAxis}\n            {yAxis}\n            {tooltip}\n            {legend}\n            {children}\n          </RechartsAreaChart>\n        )}\n      </AutoSizedChartWrapper>\n    </ChartContextProvider>\n  )\n})\n"],"names":[],"mappings":";;;;;;;;;AAsCO;;;AAgBG;;;AAIM;AAIR;;;AAGE;AAKM;;AAcF;AAWN;AAWN;;;;;;;AAkBW;AAMb;;"}