{"version":3,"file":"line-chart.js","sources":["../../../src/components/line-chart.tsx"],"sourcesContent":["\"use client\"\n\nimport classNames from \"classnames\"\nimport React from \"react\"\nimport { Dot, DotProps, Line, LineChart as RechartsLineChart } from \"recharts\"\nimport {\n  AutoSizedChartWrapper,\n  CartesianGrid,\n  ChartContextProvider,\n  ChartLegend,\n  ChartTooltip,\n  DEFAULT_COLORS,\n  XAxis,\n  YAxis,\n} from \"./charts\"\nimport styles from \"./line-chart.module.css\"\n\ninterface Props extends React.HTMLAttributes<HTMLDivElement> {\n  categories: string[]\n  colors?: string[]\n  dark?: boolean\n  data: Array<object>\n  index: string\n\n  // Slots\n  gridLines?: React.ReactNode\n  xAxis?: React.ReactNode\n  yAxis?: React.ReactNode\n  tooltip?: React.ReactNode\n  legend?: React.ReactNode\n\n  // LineChart props\n  layout?: \"horizontal\" | \"vertical\"\n  syncId?: number | string\n  margin?: { top: number; right: number; bottom: number; left: number }\n}\n\nexport const LineChart = React.forwardRef<HTMLDivElement, Props>(function LineChart(\n  {\n    categories,\n    colors = DEFAULT_COLORS,\n    dark,\n    data,\n    index,\n    gridLines = <CartesianGrid />,\n    xAxis = <XAxis dataKey={index} />,\n    yAxis = <YAxis />,\n    tooltip = <ChartTooltip />,\n    legend = <ChartLegend />,\n    children = categories.map((category, index) => {\n      const color = colors[index % colors.length]\n      return (\n        <Line\n          key={index}\n          type=\"monotone\"\n          activeDot={(props: DotProps) => (\n            <Dot className={classNames(styles.dot, { [styles.dark]: dark })} r={5} style={{ fill: color }} {...props} />\n          )}\n          dot={false}\n          dataKey={category}\n          fill={color}\n          isAnimationActive={false}\n          stroke={color}\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n          strokeWidth={2}\n        />\n      )\n    }),\n    layout,\n    syncId,\n    margin,\n    ...otherProps\n  },\n  ref,\n) {\n  return (\n    <ChartContextProvider categories={categories} colors={colors} dark={dark}>\n      <AutoSizedChartWrapper ref={ref} {...otherProps}>\n        {({ height, width }) => (\n          <RechartsLineChart data={data} height={height} width={width} layout={layout} syncId={syncId} margin={margin}>\n            {gridLines}\n            {xAxis}\n            {yAxis}\n            {tooltip}\n            {legend}\n            {children}\n          </RechartsLineChart>\n        )}\n      </AutoSizedChartWrapper>\n    </ChartContextProvider>\n  )\n})\n"],"names":[],"mappings":";;;;;;;;;AAqCO;;AAcD;AAiBF;AAQF;AAEI;;;;;;AAQO;AAMb;;"}